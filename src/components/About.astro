<div class="px-6 md:px-24 lg:px-48 xl:px-64 2xl:px-96 w-full flex flex-col items-start gap-16 py-8">
  <div class="flex flex-col">
    <div id="container5"
         class="outfit flex gap-0 text-4xl mg:text-6xl lg:text-8xl tracking-tighter font-semibold text-wrap">
      <span id="about" class="text-stone-400">About Me</span>
      <span id="underscore_____" class="text-amber-500">_</span>
    </div>
  </div>

  <div class="text-stone-400 flex flex-col gap-4">
    <p>I am a passionate web developer with a love for creating beautiful and functional websites. I have experience with a variety of technologies, including HTML, CSS, JavaScript, Vue, and React.</p>
    <p>When I'm not coding, I enjoy spending time with my family and friends, playing video games, and learning new things.</p>
  </div>
</div>

<script>
  const under = document.getElementById('underscore_____')
  const name = document.getElementById('about')
  const container = document.getElementById('container5')

  const txt = 'About Me'
  let index = 0
  let text = []
  let typingInterval:any
  let blinkInterval:any

  // Function to start the typing animation
  const startTyping = () => {
    if (typingInterval) return; // Prevent multiple intervals
    typingInterval = setInterval(() => {
      if (!name || index >= txt.length) {
        clearInterval(typingInterval)
        return
      }
      text.push(txt.split('')[index])
      index++
      name.innerHTML = text.join('')
    }, 100)
  }

  // Function to start the blinking cursor
  const startBlinking = () => {
    if (blinkInterval) return; // Prevent multiple intervals
    blinkInterval = setInterval(() => {
      if (!under) return
      if (under.classList.contains('text-white/0')) {
        under.classList.remove('text-white/0')
      } else {
        under.classList.add('text-white/0')
      }
    }, 600)
  }

  // Create an Intersection Observer instance
  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // If the element is in view, start the animations
        startTyping()
        startBlinking()
      } else {
        // If the element is out of view, stop the animations
        clearInterval(typingInterval)
        clearInterval(blinkInterval)
        typingInterval = null
        blinkInterval = null
      }
    })
  })

  // Start observing the container element
  if (container) {
    observer.observe(container)
  }
</script>
